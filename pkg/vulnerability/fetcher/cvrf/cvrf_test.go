package cvrf

import (
	"encoding/xml"
	"os"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/google/go-cmp/cmp/cmpopts"

	"github.com/vulsio/windows-vuln-feed/pkg/vulnerability/model"
)

func TestParse(t *testing.T) {
	var tests = []struct {
		input         string
		expected      []model.Vulnerability
		expectedError bool
	}{
		{
			input: "./testdata/2022-May.xml",
			expected: []model.Vulnerability{
				{
					CVEID: "CVE-2022-21972",
					Title: "Point-to-Point Tunneling Protocol Remote Code Execution Vulnerability",
					FAQs: []string{
						"<p><strong>According to the CVSS metric, the attack complexity is high (AC:H). What does that mean for this vulnerability?</strong></p>\n<p>Successful exploitation of this vulnerability requires an attacker to win a race condition.</p>",
						"<p><strong>How could an attacker exploit this vulnerability?</strong></p>\n<p>An unauthenticated attacker could send a specially crafted connection request to a RAS server, which could lead to remote code execution (RCE) on the RAS server machine.</p>",
					},
					Tag:           "Windows Point-to-Point Tunneling Protocol",
					CNA:           "Microsoft",
					ExploitStatus: "Publicly Disclosed:No;Exploited:No;Latest Software Release:Exploitation Less Likely;Older Software Release:Exploitation Less Likely;DOS:N/A",
					Products: []model.Product{
						{
							ProductID: "11923",
							Name:      "Windows Server 2022",
							Impact:    "Remote Code Execution",
							Severity:  "Critical",
							ScoreSet: &model.ScoreSet{
								BaseScore:     "8.1",
								TemporalScore: "7.1",
								Vector:        "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:O/RC:C",
							},
							KBs: []model.KB{
								{
									Article:         "5013944",
									RestartRequired: "Yes",
									SubType:         "Security Update",
									FixedBuild:      "10.0.20348.707",
									ArticleURL:      "https://support.microsoft.com/help/5013944",
									DownloadURL:     "https://catalog.update.microsoft.com/v7/site/Search.aspx?q=KB5013944",
								},
							},
						},
						{
							ProductID: "11924",
							Name:      "Windows Server 2022 (Server Core installation)",
							Impact:    "Remote Code Execution",
							Severity:  "Critical",
							ScoreSet: &model.ScoreSet{
								BaseScore:     "8.1",
								TemporalScore: "7.1",
								Vector:        "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:O/RC:C",
							},
							KBs: []model.KB{
								{
									Article:         "5013944",
									RestartRequired: "Yes",
									SubType:         "Security Update",
									FixedBuild:      "10.0.20348.707",
									ArticleURL:      "https://support.microsoft.com/help/5013944",
									DownloadURL:     "https://catalog.update.microsoft.com/v7/site/Search.aspx?q=KB5013944",
								},
							},
						},
					},
					URL: "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-21972",
					Acknowledgments: []model.Acknowledgment{
						{Name: `<a href="https://twitter.com/i4mchr00t">Alex Nichols</a> with <a href="https://labs.nettitude.com/">Nettitude</a>`},
						{Name: `<a href="https://twitter.com/guhe120">Yuki Chen</a> with <a href="https://www.cyberkl.com/">Cyber KunLun</a>`},
					},
					Revisions: []model.Revision{
						{
							Number:      "1.0",
							Date:        "2022-05-10T07:00:00",
							Description: "<p>Information published.</p>",
						},
					},
				},
				{
					CVEID:       "CVE-2022-30190",
					Title:       "Microsoft Windows Support Diagnostic Tool (MSDT) Remote Code Execution Vulnerability",
					Description: "<p>A remote code execution vulnerability exists when MSDT is called using the URL protocol from a calling application such as Word. An attacker who successfully exploits this vulnerability can run arbitrary code with the privileges of the calling application. The attacker can then install programs, view, change, or delete data, or create new accounts in the context allowed by the userâ€™s rights.</p>\n<p>Please see the\u00a0<a href=\"https://aka.ms/CVE-2022-30190-Guidance\">MSRC Blog Entry</a> for important information about steps you can take to protect your system from this vulnerability.</p>",
					FAQs: []string{
						"<p><strong>According to the CVSS metric, the attack vector is local (AV:L). Why does the CVE title indicate that this is a remote code execution?</strong></p>\n<p>The word <strong>Remote</strong> in the title refers to the location of the attacker. This type of exploit is sometimes referred to as Arbitrary Code Execution (ACE). The attack itself is carried out locally.</p>\n<p>For example, when the score indicates that the <strong>Attack Vector</strong> is <strong>Local</strong> and <strong>User Interaction</strong> is <strong>Required</strong>, this could describe an exploit in which an attacker, through social engineering, convinces a victim to download and open a specially crafted file from a website which leads to a local attack on their computer.</p>",
						"<p><strong>Where can I find more information?</strong></p>\n<p>Please see this <a href=\"https://aka.ms/CVE-2022-30190-Guidance\">MSRC Blog Entry</a>.</p>",
					},
					Tag:           "Microsoft Windows Support Diagnostic Tool (MSDT)",
					CNA:           "Microsoft",
					ExploitStatus: "Publicly Disclosed:Yes;Exploited:Yes;Latest Software Release:Exploitation Detected;Older Software Release:Exploitation Detected;DOS:N/A",
					Products: []model.Product{
						{
							ProductID: "11923",
							Name:      "Windows Server 2022",
							Impact:    "Remote Code Execution",
							Severity:  "Important",
							ScoreSet: &model.ScoreSet{
								BaseScore:     "7.8",
								TemporalScore: "7.3",
								Vector:        "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H/E:F/RL:T/RC:C",
							},
							KBs: nil,
						},
						{
							ProductID: "11924",
							Name:      "Windows Server 2022 (Server Core installation)",
							Impact:    "Remote Code Execution",
							Severity:  "Important",
							ScoreSet: &model.ScoreSet{
								BaseScore:     "7.8",
								TemporalScore: "7.3",
								Vector:        "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H/E:F/RL:T/RC:C",
							},
							KBs: nil,
						},
					},
					URL: "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2022-30190",
					Acknowledgments: []model.Acknowledgment{
						{Name: "<a href=\"https://twitter.com/crazymanarmy\">crazyman</a> with <a href=\"https://twitter.com/shadowchasing1\">Shadow Chaser Group</a>"},
					},
					Revisions: []model.Revision{
						{
							Number:      "1.0",
							Date:        "2022-05-30T07:00:00",
							Description: "<p>Information published.</p>",
						},
					},
				},
			},
		},
		{
			input: "./testdata/2019-Oct.xml",
			expected: []model.Vulnerability{
				{
					CVEID: "CVE-2019-0608",
					Title: "Microsoft Browser Spoofing Vulnerability",
					Description: `<p>A spoofing vulnerability exists when Microsoft Browsers does not properly parse HTTP content. An attacker who successfully exploited this vulnerability could impersonate a user request by crafting HTTP queries. The specially crafted website could either spoof content or serve as a pivot to chain an attack with other vulnerabilities in web services.</p>
<p>To exploit the vulnerability, the user must click a specially crafted URL. In an email attack scenario, an attacker could send an email message containing the specially crafted URL to the user in an attempt to convince the user to click it.</p>
<p>In a web-based attack scenario, an attacker could host a specially crafted website designed to appear as a legitimate website to the user. However, the attacker would have no way to force the user to visit the specially crafted website. The attacker would have to convince the user to visit the specially crafted website, typically by way of enticement in an email or instant message, and then convince the user to interact with content on the website.</p>
<p>The update addresses the vulnerability by correcting how Microsoft Browsers parses HTTP responses.</p>`,
					Tag:           "Microsoft Browsers",
					ExploitStatus: "Publicly Disclosed:No;Exploited:No;Latest Software Release:Exploitation Less Likely;Older Software Release:Exploitation Less Likely",
					Products: []model.Product{
						{
							ProductID: "10486-10483",
							Name:      "Internet Explorer 11 on Windows Server 2012 R2",
							Impact:    "Spoofing",
							Severity:  "Low",
							ScoreSet: &model.ScoreSet{
								BaseScore:     "2.4",
								TemporalScore: "2.2",
								Vector:        "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:L/I:N/A:N/E:P/RL:O/RC:C",
							},
							KBs: []model.KB{
								{
									Article:         "4520005",
									RestartRequired: "Yes",
									SubType:         "Monthly Rollup",
									ArticleURL:      "https://support.microsoft.com/help/4520005",
									DownloadURL:     "https://catalog.update.microsoft.com/v7/site/Search.aspx?q=KB4520005",
								},
								{
									Article:         "4519974",
									RestartRequired: "Yes",
									SubType:         "IE Cumulative",
									ArticleURL:      "https://support.microsoft.com/help/4519974",
									DownloadURL:     "https://catalog.update.microsoft.com/v7/site/Search.aspx?q=KB4519974",
								},
							},
						},
					},
					URL: "https://msrc.microsoft.com/update-guide/vulnerability/CVE-2019-0608",
					Acknowledgments: []model.Acknowledgment{
						{Name: `<a href="https://web-safety.net">Tomasz Bojarski</a>`},
					},
					Revisions: []model.Revision{
						{
							Number:      "1.0",
							Date:        "2019-10-08T07:00:00Z",
							Description: "<p>Information published.</p>",
						},
					},
				},
			},
		},
		{
			input:         "./testdata/error.xml",
			expectedError: true,
		},
	}

	for i, tt := range tests {
		f, err := os.Open(tt.input)
		if err != nil {
			t.Fatalf("[%d] failed to open %s. err: %s", i, tt.input, err)
		}
		defer f.Close()

		var root Doc
		if err := xml.NewDecoder(f).Decode(&root); err != nil {
			t.Fatalf("[%d] failed to decode %s. err: %s", i, tt.input, err)
		}

		got, err := Parse(root)
		if err != nil {
			if tt.expectedError {
				continue
			}
			t.Errorf("[%d] unexpected error has occurred. err: %s", i, err)
		}
		opts := []cmp.Option{
			cmpopts.SortSlices(func(i, j model.Product) bool {
				return i.ProductID < j.ProductID
			}),
			cmpopts.SortSlices(func(i, j model.KB) bool {
				return i.Article < j.Article
			}),
		}
		if diff := cmp.Diff(tt.expected, got, opts...); diff != "" {
			t.Errorf("[%d] failed to Parse(). (-expected +got):\n%s", i, diff)
		}
	}
}
