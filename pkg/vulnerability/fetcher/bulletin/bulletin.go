package bulletin

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/pkg/errors"
	"github.com/tealeg/xlsx"
	"golang.org/x/exp/maps"

	"github.com/vulsio/windows-vuln-feed/pkg/vulnerability/model"
	winpro "github.com/vulsio/windows-vuln-feed/pkg/windows/product"
)

var (
	bulletinURLs = []string{
		"https://download.microsoft.com/download/6/7/3/673E4349-1CA5-40B9-8879-095C72D5B49D/BulletinSearch.xlsx",
		"https://download.microsoft.com/download/6/7/3/673E4349-1CA5-40B9-8879-095C72D5B49D/BulletinSearch2001-2008.xlsx",
	}
	cveURLFormat      = "https://msrc.microsoft.com/update-guide/vulnerability/%s"
	articleURLFormat  = "https://support.microsoft.com/help/%s"
	downloadURLFormat = "https://catalog.update.microsoft.com/v7/site/Search.aspx?q=KB%s"
	datePattern       = regexp.MustCompile(`\d{1,2}/\d{1,2}/\d{4}`)
)

// FetchandParse ...
func FetchandParse() ([]model.Vulnerability, error) {
	log.Printf("INFO: fetch Bulletin data feeds. URL: %s", bulletinURLs)
	bulletins, err := fetch()
	if err != nil {
		return nil, errors.Wrap(err, "failed to fetch Bulletin data feeds")
	}

	cves := Parse(bulletins)
	log.Printf("INFO: %d CVEs found", len(cves))

	return cves, nil
}

func fetch() ([]Bulletin, error) {
	bulletins := []Bulletin{}
	for _, bulletinURL := range bulletinURLs {
		req, err := http.NewRequest(http.MethodGet, bulletinURL, nil)
		if err != nil {
			return nil, errors.Wrap(err, "failed to build request")
		}

		client := new(http.Client)
		resp, err := client.Do(req)
		if err != nil {
			return nil, errors.Wrap(err, "failed to do request")
		}
		defer resp.Body.Close()

		bs, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, errors.Wrap(err, "failed to read response body")
		}

		f, err := xlsx.OpenBinary(bs)
		if err != nil {
			return nil, errors.Wrap(err, "failed to open xlsx binary")
		}
		for _, sheet := range f.Sheets {
			for i, row := range sheet.Rows {
				// skip header
				if i == 0 {
					continue
				}

				var line Bulletin
				if err := row.ReadStruct(&line); err != nil {
					return nil, errors.Wrap(err, "failed to read xlsx line")
				}
				bulletins = append(bulletins, line)
			}
		}
	}
	return bulletins, nil
}

// Parse ...
func Parse(bulletins []Bulletin) []model.Vulnerability {
	vulnMap := map[string]model.Vulnerability{}
	for _, bulletin := range bulletins {
		if bulletin.CVEs == "" {
			log.Printf(`WARN: %s %s is skipped because "CVEs" is an empty string`, bulletin.Title, bulletin.ComponentKB)
			continue
		}
		for _, cve := range parseCVEIDs(bulletin.CVEs) {
			v, ok := vulnMap[cve]
			if !ok {
				v = model.Vulnerability{
					CVEID: cve,
					Title: bulletin.Title,
					URL:   fmt.Sprintf(cveURLFormat, cve),
				}
			}

			if t := parseDate(bulletin.DatePosted); t != "" {
				v.Revisions = []model.Revision{
					{
						Number:      "1.0",
						Date:        parseDate(bulletin.DatePosted),
						Description: "\u003cp\u003eInformation published.\u003c/p\u003e\n",
					},
				}
			}

			name := bulletin.AffectedProduct
			if bulletin.AffectedComponent != "" {
				if winpro.WinDesktopPattern.MatchString(bulletin.AffectedComponent) || winpro.WinServerPattern.MatchString(bulletin.AffectedComponent) {
					name = fmt.Sprintf("%s on %s", bulletin.AffectedProduct, bulletin.AffectedComponent)
				} else {
					name = fmt.Sprintf("%s on %s", bulletin.AffectedComponent, bulletin.AffectedProduct)
				}
			}
			v.Products = append(v.Products, model.Product{
				Name:     winpro.Format(name),
				Impact:   bulletin.Impact,
				Severity: bulletin.Severity,
				KBs: []model.KB{
					{
						Article:         bulletin.ComponentKB,
						RestartRequired: bulletin.Reboot,
						ArticleURL:      fmt.Sprintf(articleURLFormat, bulletin.ComponentKB),
						DownloadURL:     fmt.Sprintf(downloadURLFormat, bulletin.ComponentKB),
					},
				},
			})
			vulnMap[cve] = v
		}
	}

	vulns := []model.Vulnerability{}
	for _, v := range vulnMap {
		ps := map[string]model.Product{}
		for _, p := range v.Products {
			if base, ok := ps[p.Name]; ok {
				p.KBs = append(p.KBs, base.KBs...)
			}
			ps[p.Name] = p
		}
		v.Products = maps.Values(ps)
		vulns = append(vulns, v)
	}
	return vulns
}

func parseDate(s string) string {
	t, err := time.Parse("01-02-06", s)
	if err == nil {
		return t.Format(time.RFC3339)
	}
	if ss := datePattern.FindAllString(s, 1); len(ss) == 1 {
		t, err := time.Parse("1/2/2006", ss[0])
		if err == nil {
			return t.Format(time.RFC3339)
		}
	}
	return ""
}

func parseCVEIDs(s string) []string {
	cs := map[string]struct{}{}
	for _, c := range strings.Split(strings.ToUpper(strings.ReplaceAll(strings.TrimSuffix(s, "\n"), " ", "")), ",") {
		// c: CVE-2021-31936, CAN-2001-0002, CVE-2015-2442CVE-2015-2446, CVE-CVE-2007-0515, CVE, CVE2007-0029, CVE20163325, 2008-1438, CVE-2017-00016
		if strings.HasPrefix(c, "CVE-") {
			// c: CVE-2021-31936, CVE-2015-2442CVE-2015-2446, CVE-CVE-2007-0515, CVE-2017-00016
			for _, cveNumber := range strings.Split(c, "CVE-") {
				switch cveNumber {
				case "":
					continue
				case "2017-00016":
					cs["CVE-2017-0016"] = struct{}{}
				default:
					cs[fmt.Sprintf("CVE-%s", cveNumber)] = struct{}{}
				}
			}
		} else {
			var cveID string
			// c: CAN-2001-0002, CVE20163325, 2008-1438
			if strings.HasPrefix(c, "CAN-") {
				cveID = c
			} else {
				// c: CVE, CVE2007-0029, CVE20163325, 2008-1438
				if strings.HasPrefix(c, "CVE") {
					// c: CVE, CVE2007-0029, CVE20163325
					cveNumber := strings.TrimPrefix(c, "CVE")
					if cveNumber == "" {
						continue
					}
					if strings.Contains(cveNumber, "-") {
						// cveNumber: 2007-0029
						cveID = fmt.Sprintf("CVE-%s", cveNumber)
					} else {
						// cveNumber: 20163325
						if len(cveNumber) < 8 {
							continue
						}
						cveID = fmt.Sprintf("CVE-%s-%s", c[3:7], c[7:])
					}
				} else {
					// c: 2008-1438
					cveID = fmt.Sprintf("CVE-%s", c)
				}
			}
			cs[cveID] = struct{}{}
		}
	}
	return maps.Keys(cs)
}
