package builder

import (
	"encoding/json"
	"io/fs"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	"golang.org/x/exp/maps"

	"github.com/vulsio/windows-vuln-feed/pkg/vulnerability/model"
)

// Build ...
func Build(dirs []string) ([]model.Vulnerability, error) {
	cveMap := map[string]model.Vulnerability{}
	for _, dir := range dirs {
		if err := filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
			if err != nil {
				if os.IsNotExist(err) {
					return nil
				}
				return err
			}

			if d.IsDir() || filepath.Ext(path) != ".json" {
				return nil
			}

			f, err := os.Open(path)
			if err != nil {
				return errors.Wrapf(err, "failed to open %s", path)
			}
			defer f.Close()

			cve := model.Vulnerability{}
			if err := json.NewDecoder(f).Decode(&cve); err != nil {
				return errors.Wrapf(err, "failed to decode %s", path)
			}
			cveMap[cve.CVEID] = cve

			return nil
		}); err != nil {
			return nil, errors.Wrap(err, "failed to walk directory")
		}
	}
	return maps.Values(cveMap), nil
}
